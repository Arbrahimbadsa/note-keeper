{"version":3,"sources":["components/Camera.js","components/Editor.js","App.js","index.js"],"names":["CameraWrapper","styled","div","Video","video","Button","button","Camera","onSnap","useRef","useState","setImage","useEffect","a","navigator","mediaDevices","enumerateDevices","length","facingMode","getUserMedia","aspectRatio","stream","current","srcObject","playsInline","autoPlay","ref","onClick","photo","c","document","createElement","height","window","innerHeight","width","innerWidth","getContext","drawImage","toDataURL","getImage","EditorWrapper","EditorControl","Editor","image","onProceed","imgRef","x","y","unit","crop","setCrop","completedCrop","setCompletedCrop","croppedImage","setCroppedImage","canvas","scaleX","naturalWidth","scaleY","naturalHeight","ctx","pixelRatio","devicePixelRatio","setTransform","imageSmoothingQuality","src","onImageLoaded","img","onChange","onComplete","PreviewImage","PreviewWrapper","Control","App","showPreview","setShowPreview","preservedImage","setPreservedImage","showEditor","setShowEditor","className","imageSrc","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3b377e57.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nconst CameraWrapper = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n`;\r\nconst Video = styled.video`\r\n  postition: absolute;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  left: 0;\r\n  top: 0;\r\n  object-fit: fill;\r\n  pointer-events: none;\r\n`;\r\nconst Button = styled.button`\r\n  height: 50px;\r\n  width: 50px;\r\n  border-radius: 50%;\r\n  background: #fff;\r\n  position: absolute;\r\n  bottom: 20px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  cursor: pointer;\r\n  border: none;\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n  &:hover {\r\n    border: 5px solid gray;\r\n    opacity: 0.8;\r\n  }\r\n`;\r\nconst Camera = ({ onSnap }) => {\r\n  const video = useRef(null);\r\n  const [image, setImage] = useState(null);\r\n  const [showEditor, setShowEditor] = useState(false);\r\n  const getImage = (video) => {\r\n    const c = document.createElement(\"canvas\");\r\n    c.height = window.innerHeight;\r\n    c.width = window.innerWidth;\r\n    const ctx = c.getContext(\"2d\");\r\n    ctx.drawImage(video, 0, 0, c.width, c.height);\r\n    return c.toDataURL();\r\n  };\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const facingMode =\r\n          (await (await navigator.mediaDevices.enumerateDevices()).length) <= 1\r\n            ? \"user\"\r\n            : \"environment\";\r\n        const stream = await navigator.mediaDevices.getUserMedia({\r\n          video: {\r\n            facingMode,\r\n            aspectRatio: 1920 / 1080,\r\n          },\r\n        });\r\n        video.current.srcObject = stream;\r\n      } catch (error) {\r\n        //..\r\n      }\r\n    })();\r\n  }, []);\r\n  const snap = () => {\r\n    const photo = getImage(video.current);\r\n    setImage(photo);\r\n    onSnap && onSnap(photo);\r\n  };\r\n  return (\r\n    <>\r\n      <CameraWrapper>\r\n        <Video playsInline autoPlay ref={video} />\r\n        <Button onClick={snap} />\r\n      </CameraWrapper>\r\n    </>\r\n  );\r\n};\r\nCamera.propTypes ={\r\n  onSnap: PropTypes.func\r\n}\r\nexport default Camera;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ReactCrop from \"react-image-crop\";\r\nimport styled from \"styled-components\";\r\nimport \"react-image-crop/dist/ReactCrop.css\";\r\nconst EditorWrapper = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  position: absolute;\r\n  top: 0;\r\n  z-index: 20;\r\n`;\r\nconst Button = styled.button`\r\n  background: #fff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  padding: 8px 10px;\r\n  opacity: 0.9;\r\n  margin-right: 5px;\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n`;\r\nconst EditorControl = styled.div`\r\n  height: auto;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  position: absolute;\r\n  top: 0;\r\n  padding: 20px;\r\n  user-select: none;\r\n`;\r\nconst Editor = ({ image, onProceed }) => {\r\n  const imgRef = useRef(null);\r\n  const [crop, setCrop] = useState({\r\n    x: 35,\r\n    y: 35,\r\n    unit: \"%\",\r\n    width: 30,\r\n    height: 30,\r\n  });\r\n  const [completedCrop, setCompletedCrop] = useState(null);\r\n  const [croppedImage, setCroppedImage] = useState(null);\r\n  const handleImageLoad = (img) => {\r\n    imgRef.current = img;\r\n  };\r\n  const handleProceed = () => {\r\n    if (croppedImage) onProceed(croppedImage);\r\n    else onProceed(image);\r\n  };\r\n  useEffect(() => {\r\n    if (!completedCrop || !imgRef.current) {\r\n      return;\r\n    }\r\n    const canvas = document.createElement(\"canvas\");\r\n    const image = imgRef.current;\r\n    const crop = completedCrop;\r\n\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    const pixelRatio = window.devicePixelRatio;\r\n\r\n    canvas.width = crop.width * pixelRatio;\r\n    canvas.height = crop.height * pixelRatio;\r\n\r\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n    ctx.imageSmoothingQuality = \"high\";\r\n\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width,\r\n      crop.height\r\n    );\r\n    const croppedImage = canvas.toDataURL();\r\n    setCroppedImage(croppedImage);\r\n  }, [completedCrop]);\r\n  return (\r\n    <EditorWrapper>\r\n      <ReactCrop\r\n        src={image}\r\n        onImageLoaded={handleImageLoad}\r\n        crop={crop}\r\n        onChange={(c) => setCrop(c)}\r\n        onComplete={(c) => setCompletedCrop(c)}\r\n      />\r\n      <EditorControl>\r\n        <Button onClick={handleProceed}>Proceed</Button>\r\n        <Button>Cancel</Button>\r\n      </EditorControl>\r\n    </EditorWrapper>\r\n  );\r\n};\r\nEditor.propTypes = {\r\n  image: PropTypes.string,\r\n  onProceed: PropTypes.func,\r\n};\r\nexport default Editor;\r\n","import Camera from \"./components/Camera\";\nimport Editor from \"./components/Editor\";\nimport styled from \"styled-components\";\nimport { useEffect, useState } from \"react\";\nconst PreviewImage = styled.img`\n  height: 100vh;\n  width: 100vw;\n  top: 0;\n  z-index: 10;\n`;\nconst Button = styled.button`\n  height: 30px;\n  width: 80px;\n  border-radius: 5px;\n  background: #000;\n  color: #fff;\n  border: none;\n  cursor: pointer;\n  &:hover {\n    opacity: 0.8;\n  }\n`;\nconst PreviewWrapper = styled.div`\n  height: 100vh;\n  width: 100vw;\n  position: absolute;\n  top: 0;\n  z-index: 15;\n`;\nconst Control = styled.div`\n  position: absolute;\n  bottom: 0;\n  padding: 25px 0;\n  width: 100%;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n`;\nfunction App() {\n  const [showPreview, setShowPreview] = useState(false);\n  const [preservedImage, setPreservedImage] = useState(null);\n  const [image, setImage] = useState(null);\n  const [showEditor, setShowEditor] = useState(false);\n  const handleSnap = (imageSrc) => {\n    setImage(imageSrc);\n    setPreservedImage(imageSrc);\n    setShowPreview(true);\n  };\n  const handleRetake = () => {\n    setShowPreview(false);\n  };\n  const handleOnProceed = (croppedImage) => {\n    setImage(croppedImage);\n    setShowEditor(false);\n    setShowPreview(true);\n  };\n  const handleShowEditor = () => {\n    setShowEditor(true);\n    setShowPreview(false);\n    setImage(preservedImage);\n  };\n  return (\n    <div className=\"App\">\n      <Camera onSnap={handleSnap} />\n      {showPreview && (\n        <PreviewWrapper>\n          <PreviewImage src={image} />\n          <Control>\n            <Button onClick={handleRetake}>Retake</Button>\n            <Button onClick={handleShowEditor}>Edit</Button>\n            <Button>Proceed</Button>\n          </Control>\n        </PreviewWrapper>\n      )}\n      {showEditor && <Editor image={image} onProceed={handleOnProceed} />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}