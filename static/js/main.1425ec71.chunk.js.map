{"version":3,"sources":["components/Camera.js","components/Editor.js","App.js","index.js"],"names":["CameraWrapper","styled","div","Video","video","Button","button","Camera","onSnap","useRef","useEffect","a","navigator","mediaDevices","enumerateDevices","length","facingMode","getUserMedia","aspectRatio","stream","current","srcObject","playsInline","autoPlay","ref","onClick","photo","c","document","createElement","height","window","innerHeight","width","innerWidth","getContext","drawImage","toDataURL","getImage","img","src","EditorWrapper","EditorControl","Editor","image","onProceed","onCancel","imgRef","useState","x","y","unit","crop","setCrop","completedCrop","setCompletedCrop","croppedImage","setCroppedImage","canvas","scaleX","naturalWidth","scaleY","naturalHeight","ctx","pixelRatio","devicePixelRatio","setTransform","imageSmoothingQuality","onImageLoaded","onChange","onComplete","PreviewImage","PreviewWrapper","Control","App","showPreview","setShowPreview","setImage","showEditor","setShowEditor","data","setData","className","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1425ec71.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nconst CameraWrapper = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n`;\r\nconst Video = styled.video`\r\n  postition: absolute;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  left: 0;\r\n  top: 0;\r\n  object-fit: fill;\r\n  pointer-events: none;\r\n`;\r\nconst Button = styled.button`\r\n  height: 50px;\r\n  width: 50px;\r\n  border-radius: 50%;\r\n  background: #fff;\r\n  position: absolute;\r\n  bottom: 20px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  cursor: pointer;\r\n  border: none;\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n  &:hover {\r\n    border: 5px solid gray;\r\n    opacity: 0.8;\r\n  }\r\n`;\r\nconst Camera = ({ onSnap }) => {\r\n  const video = useRef(null);\r\n  const getImage = (video) => {\r\n    const c = document.createElement(\"canvas\");\r\n    c.height = window.innerHeight;\r\n    c.width = window.innerWidth;\r\n    const ctx = c.getContext(\"2d\");\r\n    ctx.drawImage(video, 0, 0, c.width, c.height);\r\n    return c.toDataURL();\r\n  };\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const facingMode =\r\n          (await (await navigator.mediaDevices.enumerateDevices()).length) <= 1\r\n            ? \"user\"\r\n            : \"environment\";\r\n        const stream = await navigator.mediaDevices.getUserMedia({\r\n          video: {\r\n            facingMode,\r\n            aspectRatio: 1920 / 1080,\r\n          },\r\n        });\r\n        video.current.srcObject = stream;\r\n      } catch (error) {\r\n        //..\r\n      }\r\n    })();\r\n  }, []);\r\n  const snap = () => {\r\n    const photo = getImage(video.current);\r\n    const img = document.createElement('img');\r\n    img.src = photo;\r\n    onSnap && onSnap({height: img.height, width: img.width, photo});\r\n  };\r\n  return (\r\n    <>\r\n      <CameraWrapper>\r\n        <Video playsInline autoPlay ref={video} />\r\n        <Button onClick={snap} />\r\n      </CameraWrapper>\r\n    </>\r\n  );\r\n};\r\nCamera.propTypes ={\r\n  onSnap: PropTypes.func\r\n}\r\nexport default Camera;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ReactCrop from \"react-image-crop\";\r\nimport styled from \"styled-components\";\r\nimport \"react-image-crop/dist/ReactCrop.css\";\r\nconst EditorWrapper = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  position: absolute;\r\n  top: 0;\r\n  z-index: 20;\r\n`;\r\nconst Button = styled.button`\r\n  background: #fff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  padding: 8px 10px;\r\n  opacity: 0.9;\r\n  margin-right: 5px;\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n`;\r\nconst EditorControl = styled.div`\r\n  height: auto;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  position: absolute;\r\n  top: 0;\r\n  padding: 20px;\r\n  user-select: none;\r\n`;\r\nconst Editor = ({ image, onProceed, onCancel }) => {\r\n  const imgRef = useRef(null);\r\n  const [crop, setCrop] = useState({\r\n    x: 35,\r\n    y: 35,\r\n    unit: \"%\",\r\n    width: 30,\r\n    height: 30,\r\n  });\r\n  const [completedCrop, setCompletedCrop] = useState(null);\r\n  const [croppedImage, setCroppedImage] = useState(null);\r\n  const handleImageLoad = (img) => {\r\n    imgRef.current = img;\r\n  };\r\n  const handleProceed = () => {\r\n    if (croppedImage) onProceed(croppedImage);\r\n    else onProceed(image);\r\n  };\r\n  useEffect(() => {\r\n    if (!completedCrop || !imgRef.current) {\r\n      return;\r\n    }\r\n    const canvas = document.createElement(\"canvas\");\r\n    const image = imgRef.current;\r\n    const crop = completedCrop;\r\n\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    const pixelRatio = window.devicePixelRatio;\r\n\r\n    canvas.width = crop.width * pixelRatio;\r\n    canvas.height = crop.height * pixelRatio;\r\n\r\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n    ctx.imageSmoothingQuality = \"high\";\r\n\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width,\r\n      crop.height\r\n    );\r\n    const croppedImage = canvas.toDataURL();\r\n    setCroppedImage(croppedImage);\r\n  }, [completedCrop]);\r\n  return (\r\n    <EditorWrapper>\r\n      <ReactCrop\r\n        src={image}\r\n        onImageLoaded={handleImageLoad}\r\n        crop={crop}\r\n        onChange={(c) => setCrop(c)}\r\n        onComplete={(c) => setCompletedCrop(c)}\r\n      />\r\n      <EditorControl>\r\n        <Button onClick={handleProceed}>Proceed</Button>\r\n        <Button onClick={onCancel}>Cancel</Button>\r\n      </EditorControl>\r\n    </EditorWrapper>\r\n  );\r\n};\r\nEditor.propTypes = {\r\n  image: PropTypes.string,\r\n  onProceed: PropTypes.func,\r\n  onCancel: PropTypes.func\r\n};\r\nexport default Editor;\r\n","import Camera from \"./components/Camera\";\nimport Editor from \"./components/Editor\";\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\nconst PreviewImage = styled.img`\n  height: auto;\n  width: auto;\n  top: 0;\n  z-index: 10;\n`;\nconst Button = styled.button`\n  height: 30px;\n  width: 80px;\n  border-radius: 5px;\n  background: #000;\n  color: #fff;\n  border: none;\n  cursor: pointer;\n  &:hover {\n    opacity: 0.8;\n  }\n`;\nconst PreviewWrapper = styled.div`\n  height: 100vh;\n  width: 100vw;\n  position: absolute;\n  top: 0;\n  z-index: 15;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: #fff;\n`;\nconst Control = styled.div`\n  position: absolute;\n  bottom: 0;\n  padding: 25px 0;\n  width: 100%;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  z-index: 20;\n`;\nfunction App() {\n  const [showPreview, setShowPreview] = useState(false);\n  const [image, setImage] = useState(null);\n  const [showEditor, setShowEditor] = useState(false);\n  const [data, setData] = useState(null);\n  const handleSnap = (data) => {\n    setImage(data.photo);\n    setData(data);\n    setShowPreview(true);\n  };\n  const handleRetake = () => {\n    setShowPreview(false);\n  };\n  const handleOnProceed = (croppedImage) => {\n    setImage(croppedImage);\n    setShowEditor(false);\n    setShowPreview(true);\n  };\n  const handleShowEditor = () => {\n    setShowEditor(true);\n    setShowPreview(false);\n    setImage(data.photo);\n  };\n  const handleEditorCancel = () => {\n    setShowEditor(false);\n    setShowPreview(true);\n  };\n  return (\n    <div className=\"App\">\n      <Camera onSnap={handleSnap} />\n      {showPreview && (\n        <PreviewWrapper>\n          <PreviewImage src={image} height={data.height} width={data.width} />\n          <Control>\n            <Button onClick={handleRetake}>Retake</Button>\n            <Button onClick={handleShowEditor}>Edit</Button>\n            <Button>Proceed</Button>\n          </Control>\n        </PreviewWrapper>\n      )}\n      {showEditor && (\n        <Editor\n          image={image}\n          onProceed={handleOnProceed}\n          onCancel={handleEditorCancel}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}